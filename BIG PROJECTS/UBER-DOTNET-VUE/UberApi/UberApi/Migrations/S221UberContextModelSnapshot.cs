// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UberApi.Models.EntityFramework;

#nullable disable

namespace UberApi.Migrations
{
    [DbContext(typeof(S221UberContext))]
    partial class S221UberContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("adresse_id_seq");

            modelBuilder.HasSequence("carte_bancaire_id_seq");

            modelBuilder.HasSequence("categorie_prestation_id_seq");

            modelBuilder.HasSequence("categorie_produit_id_seq");

            modelBuilder.HasSequence("client_id_seq");

            modelBuilder.HasSequence("code_postal_id_seq");

            modelBuilder.HasSequence("commande_id_seq");

            modelBuilder.HasSequence("course_id_seq");

            modelBuilder.HasSequence("coursier_id_seq");

            modelBuilder.HasSequence("entreprise_id_seq");

            modelBuilder.HasSequence("entretien_id_seq");

            modelBuilder.HasSequence("etablissement_id_seq");

            modelBuilder.HasSequence("facture_id_seq");

            modelBuilder.HasSequence("gestion_etablissement_id_seq");

            modelBuilder.HasSequence("horaires_id_seq");

            modelBuilder.HasSequence("lieu_favori_id_seq");

            modelBuilder.HasSequence("livreur_id_seq");

            modelBuilder.HasSequence("otp_id_seq");

            modelBuilder.HasSequence("panier_id_seq");

            modelBuilder.HasSequence("pays_id_seq");

            modelBuilder.HasSequence("planning_reservation_id_seq");

            modelBuilder.HasSequence("produit_id_seq");

            modelBuilder.HasSequence("reglement_salaire_id_seq");

            modelBuilder.HasSequence("reservation_id_seq");

            modelBuilder.HasSequence("responsable_enseigne_id_seq");

            modelBuilder.HasSequence("restaurateur_id_seq");

            modelBuilder.HasSequence("type_prestation_id_seq");

            modelBuilder.HasSequence("vehicule_id_seq");

            modelBuilder.HasSequence("velo_id_seq");

            modelBuilder.HasSequence("velo_reservation_id_seq");

            modelBuilder.HasSequence("ville_id_seq");

            modelBuilder.Entity("ACommeCategorie", b =>
                {
                    b.Property<int>("IdCategoriePrestation")
                        .HasColumnType("integer")
                        .HasColumnName("cpn_id");

                    b.Property<int>("IdEtablissement")
                        .HasColumnType("integer")
                        .HasColumnName("etb_id");

                    b.HasKey("IdCategoriePrestation", "IdEtablissement")
                        .HasName("pk_a_comme_categorie");

                    b.HasIndex("IdEtablissement");

                    b.ToTable("t_j_acommecategorie_acc", (string)null);
                });

            modelBuilder.Entity("ACommeType", b =>
                {
                    b.Property<int>("IdVehicule")
                        .HasColumnType("integer")
                        .HasColumnName("vcl_id");

                    b.Property<int>("IdPrestation")
                        .HasColumnType("integer")
                        .HasColumnName("tpn_id");

                    b.HasKey("IdVehicule", "IdPrestation")
                        .HasName("pk_a_comme_type");

                    b.HasIndex("IdPrestation");

                    b.ToTable("t_j_acommetype_act", (string)null);
                });

            modelBuilder.Entity("ClientCarte", b =>
                {
                    b.Property<int>("IdCb")
                        .HasColumnType("integer")
                        .HasColumnName("cb_id");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.HasKey("IdCb", "IdClient")
                        .HasName("pk_client_carte");

                    b.HasIndex("IdClient");

                    b.ToTable("t_j_clientcarte_clca", (string)null);
                });

            modelBuilder.Entity("EstSitueA2", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("integer")
                        .HasColumnName("pdt_id");

                    b.Property<int>("IdEtablissement")
                        .HasColumnType("integer")
                        .HasColumnName("etb_id");

                    b.HasKey("IdProduit", "IdEtablissement")
                        .HasName("pk_est_situe_a_2");

                    b.HasIndex("IdEtablissement");

                    b.ToTable("t_j_estsituea2_esa2", (string)null);
                });

            modelBuilder.Entity("ProduitCategorie", b =>
                {
                    b.Property<int>("IdProduit")
                        .HasColumnType("integer")
                        .HasColumnName("pdt_id");

                    b.Property<int>("IdCategorie")
                        .HasColumnType("integer")
                        .HasColumnName("cpt_id");

                    b.HasKey("IdProduit", "IdCategorie")
                        .HasName("pk_produit_categorie");

                    b.HasIndex("IdCategorie");

                    b.ToTable("t_j_produitcategorie_pce", (string)null);
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Adresse", b =>
                {
                    b.Property<int>("IdAdresse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adr_id")
                        .HasDefaultValueSql("nextval('adresse_id_seq'::regclass)");

                    b.Property<int?>("IdVille")
                        .HasColumnType("integer")
                        .HasColumnName("vil_id");

                    b.Property<string>("Latitude")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("adr_latitude");

                    b.Property<string>("LibelleAdresse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("adr_libelle");

                    b.Property<string>("Longitude")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("adr_longitude");

                    b.HasKey("IdAdresse")
                        .HasName("pk_adresse");

                    b.HasIndex("IdVille");

                    b.ToTable("t_e_adresse_adr");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.CarteBancaire", b =>
                {
                    b.Property<int>("IdCb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cb_id")
                        .HasDefaultValueSql("nextval('carte_bancaire_id_seq'::regclass)");

                    b.Property<string>("Cryptogramme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cb_cryptogramme");

                    b.Property<DateOnly>("DateExpireCb")
                        .HasColumnType("date")
                        .HasColumnName("cb_dateexpire");

                    b.Property<string>("NumeroCb")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cb_numero");

                    b.Property<string>("TypeCarte")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cb_typecarte");

                    b.Property<string>("TypeReseaux")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("cb_typereseaux");

                    b.HasKey("IdCb")
                        .HasName("pk_carte_bancaire");

                    b.HasIndex(new[] { "NumeroCb" }, "carte_bancaire_numerocb_key")
                        .IsUnique();

                    b.ToTable("t_e_cartebancaire_ctbr");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.CategoriePrestation", b =>
                {
                    b.Property<int>("IdCategoriePrestation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cpr_id")
                        .HasDefaultValueSql("nextval('categorie_prestation_id_seq'::regclass)");

                    b.Property<string>("DescriptionCategoriePrestation")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cpr_description");

                    b.Property<string>("ImageCategoriePrestation")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("cpr_image");

                    b.Property<string>("LibelleCategoriePrestation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cpr_libelle");

                    b.HasKey("IdCategoriePrestation")
                        .HasName("pk_categorie_prestation");

                    b.ToTable("t_e_categorieprestation_cpr");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.CategorieProduit", b =>
                {
                    b.Property<int>("IdCategorie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cpt_id")
                        .HasDefaultValueSql("nextval('categorie_produit_id_seq'::regclass)");

                    b.Property<string>("NomCategorie")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cpt_nom");

                    b.HasKey("IdCategorie")
                        .HasName("pk_categorie_produit");

                    b.ToTable("t_e_categorieproduit_cpt");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clt_id")
                        .HasDefaultValueSql("nextval('client_id_seq'::regclass)");

                    b.Property<DateOnly>("DateNaissance")
                        .HasColumnType("date")
                        .HasColumnName("clt_datenaissance");

                    b.Property<bool?>("DemandeSuppression")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("clt_demandesuppression");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("clt_email");

                    b.Property<string>("GenreUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("clt_genre");

                    b.Property<int?>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<int?>("IdEntreprise")
                        .HasColumnType("integer")
                        .HasColumnName("ent_id");

                    b.Property<DateTime?>("LastConnexion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("clt_lastconnexion")
                        .HasDefaultValueSql("now()");

                    b.Property<bool?>("MfaActivee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("clt_mfaactivee");

                    b.Property<string>("MotDePasseUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("clt_motdepasse");

                    b.Property<string>("NomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("clt_nom");

                    b.Property<string>("PhotoProfile")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("clt_photoprofile");

                    b.Property<string>("PrenomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("clt_prenom");

                    b.Property<bool?>("SouhaiteRecevoirBonPlan")
                        .HasColumnType("boolean")
                        .HasColumnName("clt_souhaiterecevoirbonplan");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("clt_telephone");

                    b.Property<string>("TypeClient")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("clt_type");

                    b.HasKey("IdClient")
                        .HasName("pk_client");

                    b.HasIndex("IdAdresse");

                    b.HasIndex("IdEntreprise");

                    b.HasIndex(new[] { "EmailUser" }, "uq_client_mail")
                        .IsUnique();

                    b.ToTable("t_e_client_clt");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.CodePostal", b =>
                {
                    b.Property<int>("IdCodePostal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cp_id")
                        .HasDefaultValueSql("nextval('code_postal_id_seq'::regclass)");

                    b.Property<string>("CP")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character(5)")
                        .HasColumnName("cp_cp")
                        .IsFixedLength();

                    b.Property<int?>("IdPays")
                        .HasColumnType("integer")
                        .HasColumnName("pys_id");

                    b.HasKey("IdCodePostal")
                        .HasName("pk_code_postal");

                    b.HasIndex("IdPays");

                    b.HasIndex(new[] { "CP" }, "uq_cp")
                        .IsUnique();

                    b.ToTable("t_e_codepostal_cp");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Commande", b =>
                {
                    b.Property<int>("IdCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cmd_id")
                        .HasDefaultValueSql("nextval('commande_id_seq'::regclass)");

                    b.Property<bool>("EstLivraison")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("cmd_estlivraison");

                    b.Property<DateTime>("HeureCommande")
                        .HasColumnType("date")
                        .HasColumnName("cmd_heure");

                    b.Property<DateTime>("HeureCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("cmd_heurecreation")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<int?>("IdCb")
                        .HasColumnType("integer")
                        .HasColumnName("cb_id");

                    b.Property<int?>("IdLivreur")
                        .HasColumnType("integer")
                        .HasColumnName("livr_id");

                    b.Property<int>("IdPanier")
                        .HasColumnType("integer")
                        .HasColumnName("pnr_id");

                    b.Property<decimal>("PrixCommande")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("cmd_prix");

                    b.Property<bool>("RefusDemandee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("cmd_refusdemandee");

                    b.Property<bool>("RemboursementEffectue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("cmd_remboursementeffectue");

                    b.Property<string>("StatutCommande")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("cmd_statut");

                    b.Property<int>("TempsCommande")
                        .HasColumnType("integer")
                        .HasColumnName("cmd_temps");

                    b.HasKey("IdCommande")
                        .HasName("pk_commande");

                    b.HasIndex("IdLivreur");

                    b.HasIndex("IdPanier");

                    b.ToTable("t_e_commande_cmd");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Contient2", b =>
                {
                    b.Property<int>("IdPanier")
                        .HasColumnType("integer")
                        .HasColumnName("pnr_id");

                    b.Property<int>("IdProduit")
                        .HasColumnType("integer")
                        .HasColumnName("pdt_id");

                    b.Property<int>("IdEtablissement")
                        .HasColumnType("integer")
                        .HasColumnName("etb_id");

                    b.Property<int>("Quantite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("c2_quantite");

                    b.HasKey("IdPanier", "IdProduit")
                        .HasName("pk_contient_2");

                    b.HasIndex("IdEtablissement");

                    b.HasIndex("IdProduit");

                    b.ToTable("t_j_contient2_c2");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Course", b =>
                {
                    b.Property<int>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("crs_id")
                        .HasDefaultValueSql("nextval('course_id_seq'::regclass)");

                    b.Property<int>("AdrIdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_adr_id");

                    b.Property<string>("CommentaireCourse")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("crs_commentaire");

                    b.Property<DateOnly>("DateCourse")
                        .HasColumnType("date")
                        .HasColumnName("crs_date");

                    b.Property<decimal?>("Distance")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("crs_distance");

                    b.Property<TimeOnly>("HeureCourse")
                        .HasColumnType("time without time zone")
                        .HasColumnName("crs_heure");

                    b.Property<int>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<int>("IdCb")
                        .HasColumnType("integer")
                        .HasColumnName("cb_id");

                    b.Property<int?>("IdCoursier")
                        .HasColumnType("integer")
                        .HasColumnName("crr_id");

                    b.Property<int>("IdPrestation")
                        .HasColumnType("integer")
                        .HasColumnName("tpn_id");

                    b.Property<int>("IdReservation")
                        .HasColumnType("integer")
                        .HasColumnName("res_id");

                    b.Property<decimal?>("NoteCourse")
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)")
                        .HasColumnName("crs_note");

                    b.Property<decimal?>("Pourboire")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("crs_pourboire");

                    b.Property<decimal>("PrixCourse")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("crs_prix");

                    b.Property<string>("StatutCourse")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("crs_statut");

                    b.Property<int?>("Temps")
                        .HasColumnType("integer")
                        .HasColumnName("crs_temps");

                    b.HasKey("IdCourse")
                        .HasName("pk_course");

                    b.HasIndex("AdrIdAdresse");

                    b.HasIndex("IdAdresse");

                    b.HasIndex("IdCb");

                    b.HasIndex("IdCoursier");

                    b.HasIndex("IdPrestation");

                    b.HasIndex("IdReservation");

                    b.ToTable("t_e_course_crs");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Coursier", b =>
                {
                    b.Property<int>("IdCoursier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("crr_id")
                        .HasDefaultValueSql("nextval('coursier_id_seq'::regclass)");

                    b.Property<DateOnly?>("DateDebutActivite")
                        .HasColumnType("date")
                        .HasColumnName("crr_datedebutactivite");

                    b.Property<DateOnly>("DateNaissance")
                        .HasColumnType("date")
                        .HasColumnName("crr_datenaissance");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("crr_emailuser");

                    b.Property<string>("GenreUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("crr_genreuser");

                    b.Property<string>("Iban")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("crr_iban");

                    b.Property<int?>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<int>("IdEntreprise")
                        .HasColumnType("integer")
                        .HasColumnName("ent_id");

                    b.Property<string>("MotDePasseUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("crr_motdepasseuser");

                    b.Property<string>("NomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("crr_nomuser");

                    b.Property<decimal?>("NoteMoyenne")
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)")
                        .HasColumnName("crr_notemoyenne");

                    b.Property<string>("NumeroCarteVtc")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character(12)")
                        .HasColumnName("crr_numerocartevtc")
                        .IsFixedLength();

                    b.Property<string>("PrenomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("crr_prenomuser");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("crr_telephone");

                    b.HasKey("IdCoursier")
                        .HasName("pk_coursier");

                    b.HasIndex("IdAdresse");

                    b.HasIndex("IdEntreprise");

                    b.HasIndex(new[] { "Iban" }, "uq_coursier_iban")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailUser" }, "uq_coursier_mail")
                        .IsUnique();

                    b.HasIndex(new[] { "NumeroCarteVtc" }, "uq_coursier_numcarte")
                        .IsUnique();

                    b.ToTable("t_e_coursier_crr");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Entreprise", b =>
                {
                    b.Property<int>("IdEntreprise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ent_id")
                        .HasDefaultValueSql("nextval('entreprise_id_seq'::regclass)");

                    b.Property<int>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<string>("NomEntreprise")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ent_nom");

                    b.Property<string>("SiretEntreprise")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ent_siret");

                    b.Property<string>("Taille")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("ent_taille");

                    b.HasKey("IdEntreprise")
                        .HasName("pk_entreprise");

                    b.HasIndex("IdAdresse");

                    b.ToTable("t_e_entreprise_ent");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Entretien", b =>
                {
                    b.Property<int>("IdEntretien")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ett_id")
                        .HasDefaultValueSql("nextval('entretien_id_seq'::regclass)");

                    b.Property<DateTime?>("DateEntretien")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ett_date");

                    b.Property<int>("IdCoursier")
                        .HasColumnType("integer")
                        .HasColumnName("crr_id");

                    b.Property<DateTime?>("RdvLogistiqueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ett_rdvlogistiquedate");

                    b.Property<string>("RdvLogistiqueLieu")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ett_rdvlogistiquelieu");

                    b.Property<string>("Resultat")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ett_resultat");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ett_status")
                        .HasDefaultValueSql("'En attente'::character varying");

                    b.HasKey("IdEntretien")
                        .HasName("pk_entretien");

                    b.HasIndex("IdCoursier");

                    b.ToTable("t_e_entretien_ett");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Etablissement", b =>
                {
                    b.Property<int>("IdEtablissement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("etb_id")
                        .HasDefaultValueSql("nextval('etablissement_id_seq'::regclass)");

                    b.Property<bool?>("AEmporter")
                        .HasColumnType("boolean")
                        .HasColumnName("etb_aemporter");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("etb_description");

                    b.Property<int>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<int>("IdRestaurateur")
                        .HasColumnType("integer")
                        .HasColumnName("rst_id");

                    b.Property<string>("ImageEtablissement")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("etb_image");

                    b.Property<bool?>("Livraison")
                        .HasColumnType("boolean")
                        .HasColumnName("etb_livraison");

                    b.Property<string>("NomEtablissement")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("etb_nom");

                    b.Property<string>("TypeEtablissement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("etb_type");

                    b.HasKey("IdEtablissement")
                        .HasName("pk_etablissement");

                    b.HasIndex("IdAdresse");

                    b.HasIndex("IdRestaurateur");

                    b.ToTable("t_e_etablissement_etb");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Facture", b =>
                {
                    b.Property<int>("IdFacture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fac_id")
                        .HasDefaultValueSql("nextval('facture_id_seq'::regclass)");

                    b.Property<DateOnly?>("DateFacture")
                        .HasColumnType("date")
                        .HasColumnName("fac_datefacture");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<int?>("IdCommande")
                        .HasColumnType("integer")
                        .HasColumnName("cmd_id");

                    b.Property<int>("IdPays")
                        .HasColumnType("integer")
                        .HasColumnName("pys_id");

                    b.Property<int?>("IdReservation")
                        .HasColumnType("integer")
                        .HasColumnName("res_id");

                    b.Property<decimal?>("MontantReglement")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("fac_montantreglement");

                    b.Property<int?>("Quantite")
                        .HasColumnType("integer")
                        .HasColumnName("fac_quantite");

                    b.HasKey("IdFacture")
                        .HasName("pk_facture");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdCommande");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdReservation");

                    b.ToTable("t_e_facture_fac");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.GestionEtablissement", b =>
                {
                    b.Property<int>("IdGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ges_id")
                        .HasDefaultValueSql("nextval('gestion_etablissement_id_seq'::regclass)");

                    b.Property<int>("IdEtablissement")
                        .HasColumnType("integer")
                        .HasColumnName("etb_id");

                    b.Property<int>("IdResponsable")
                        .HasColumnType("integer")
                        .HasColumnName("rse_id");

                    b.HasKey("IdGestion")
                        .HasName("pk_gestion_etablissement");

                    b.HasIndex("IdEtablissement");

                    b.HasIndex("IdResponsable");

                    b.ToTable("t_e_gestionetablissement_ges");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Horaires", b =>
                {
                    b.Property<int>("IdHoraires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("hor_id")
                        .HasDefaultValueSql("nextval('horaires_id_seq'::regclass)");

                    b.Property<DateTimeOffset?>("HeureDebut")
                        .HasColumnType("time with time zone")
                        .HasColumnName("hor_heuredebut");

                    b.Property<DateTimeOffset?>("HeureFin")
                        .HasColumnType("time with time zone")
                        .HasColumnName("hor_heurefin");

                    b.Property<int?>("IdCoursier")
                        .HasColumnType("integer")
                        .HasColumnName("crr_id");

                    b.Property<int?>("IdEtablissement")
                        .HasColumnType("integer")
                        .HasColumnName("etb_id");

                    b.Property<int?>("IdLivreur")
                        .HasColumnType("integer")
                        .HasColumnName("livr_id");

                    b.Property<string>("JourSemaine")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("hor_joursemaine");

                    b.HasKey("IdHoraires")
                        .HasName("pk_horaires");

                    b.HasIndex("IdCoursier");

                    b.HasIndex("IdEtablissement");

                    b.HasIndex("IdLivreur");

                    b.ToTable("t_e_horaires_hor");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.LieuFavori", b =>
                {
                    b.Property<int>("IdLieuFavori")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lfs_id")
                        .HasDefaultValueSql("nextval('lieu_favori_id_seq'::regclass)");

                    b.Property<int>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<string>("NomLieu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("lfs_nom");

                    b.HasKey("IdLieuFavori")
                        .HasName("pk_lieu_favori");

                    b.HasIndex("IdAdresse");

                    b.HasIndex("IdClient");

                    b.ToTable("t_e_lieufavori_lfs");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Livreur", b =>
                {
                    b.Property<int>("IdLivreur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("livr_id")
                        .HasDefaultValueSql("nextval('livreur_id_seq'::regclass)");

                    b.Property<DateOnly?>("DateDebutActivite")
                        .HasColumnType("date")
                        .HasColumnName("livr_datedebutactivite");

                    b.Property<DateOnly>("DateNaissance")
                        .HasColumnType("date")
                        .HasColumnName("livr_datenaissance");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("livr_emailuser");

                    b.Property<string>("GenreUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("livr_genreuser");

                    b.Property<string>("Iban")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("livr_iban");

                    b.Property<int?>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<int>("IdEntreprise")
                        .HasColumnType("integer")
                        .HasColumnName("ent_id");

                    b.Property<string>("MotDePasseUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("livr_motdepasseuser");

                    b.Property<string>("NomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("livr_nomuser");

                    b.Property<decimal?>("NoteMoyenne")
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)")
                        .HasColumnName("livr_notemoyenne");

                    b.Property<string>("PrenomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("livr_prenomuser");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("livr_telephone");

                    b.HasKey("IdLivreur")
                        .HasName("pk_livreur");

                    b.HasIndex(new[] { "Iban" }, "uq_livreur_iban")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailUser" }, "uq_livreur_mail")
                        .IsUnique();

                    b.ToTable("t_e_livreur_livr");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Otp", b =>
                {
                    b.Property<int>("IdOtp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("otp_id")
                        .HasDefaultValueSql("nextval('otp_id_seq'::regclass)");

                    b.Property<string>("CodeOtp")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character(6)")
                        .HasColumnName("otp_code")
                        .IsFixedLength();

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("otp_dateexpiration");

                    b.Property<DateTime>("DateGeneration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("otp_dategeneration")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<bool?>("Utilise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("otp_utilise");

                    b.HasKey("IdOtp")
                        .HasName("pk_otp");

                    b.HasIndex("IdClient");

                    b.ToTable("t_e_otp_otp");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Panier", b =>
                {
                    b.Property<int>("IdPanier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pnr_id")
                        .HasDefaultValueSql("nextval('panier_id_seq'::regclass)");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<decimal?>("Prix")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("pnr_prix");

                    b.HasKey("IdPanier")
                        .HasName("pk_panier");

                    b.HasIndex("IdClient");

                    b.ToTable("t_e_panier_pnr");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Pays", b =>
                {
                    b.Property<int>("IdPays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pys_id")
                        .HasDefaultValueSql("nextval('pays_id_seq'::regclass)");

                    b.Property<string>("NomPays")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pys_nom");

                    b.Property<decimal?>("PourcentageTva")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("pys_pourcentagetva");

                    b.HasKey("IdPays")
                        .HasName("pk_pays");

                    b.HasIndex(new[] { "NomPays" }, "uq_nompays")
                        .IsUnique();

                    b.ToTable("t_e_pays_pys");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Produit", b =>
                {
                    b.Property<int>("IdProduit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pdt_id")
                        .HasDefaultValueSql("nextval('produit_id_seq'::regclass)");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("pdt_description");

                    b.Property<string>("ImageProduit")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("pdt_image");

                    b.Property<string>("NomProduit")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("pdt_nom");

                    b.Property<decimal?>("PrixProduit")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("pdt_prix");

                    b.HasKey("IdProduit")
                        .HasName("pk_produit");

                    b.ToTable("t_e_produit_pdt");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.ReglementSalaire", b =>
                {
                    b.Property<int>("IdReglement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rsa_id")
                        .HasDefaultValueSql("nextval('reglement_salaire_id_seq'::regclass)");

                    b.Property<int?>("IdCoursier")
                        .HasColumnType("integer")
                        .HasColumnName("crr_id");

                    b.Property<int?>("IdLivreur")
                        .HasColumnType("integer")
                        .HasColumnName("livr_id");

                    b.Property<decimal?>("MontantReglement")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("rsa_montantreglement");

                    b.HasKey("IdReglement")
                        .HasName("pk_reglement_salaire");

                    b.HasIndex("IdCoursier");

                    b.ToTable("t_e_reglementsalaire_rsa");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Reservation", b =>
                {
                    b.Property<int>("IdReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("res_id")
                        .HasDefaultValueSql("nextval('reservation_id_seq'::regclass)");

                    b.Property<DateOnly?>("DateReservation")
                        .HasColumnType("date")
                        .HasColumnName("res_date");

                    b.Property<TimeOnly?>("HeureReservation")
                        .HasColumnType("time without time zone")
                        .HasColumnName("res_heure");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<string>("PourQui")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("res_pourqui");

                    b.HasKey("IdReservation")
                        .HasName("pk_reservation");

                    b.HasIndex("IdClient");

                    b.ToTable("t_e_reservation_res");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.ResponsableEnseigne", b =>
                {
                    b.Property<int>("IdResponsable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rse_id")
                        .HasDefaultValueSql("nextval('responsable_enseigne_id_seq'::regclass)");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("rse_email");

                    b.Property<string>("MotDePasseUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("rse_motdepasse");

                    b.Property<string>("NomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rse_nom");

                    b.Property<string>("PrenomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rse_prenom");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rse_telephone");

                    b.HasKey("IdResponsable")
                        .HasName("pk_responsable_enseigne");

                    b.HasIndex(new[] { "EmailUser" }, "uq_responsable_email")
                        .IsUnique();

                    b.ToTable("t_e_responsableenseigne_rse");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Restaurateur", b =>
                {
                    b.Property<int>("IdRestaurateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rst_id")
                        .HasDefaultValueSql("nextval('restaurateur_id_seq'::regclass)");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("rst_email");

                    b.Property<string>("MotDePasseUser")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("rst_motdepasse");

                    b.Property<string>("NomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rst_nom");

                    b.Property<string>("PrenomUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rst_prenom");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rst_telephone");

                    b.HasKey("IdRestaurateur")
                        .HasName("pk_restaurateur");

                    b.HasIndex(new[] { "EmailUser" }, "uq_restaurateur_mail")
                        .IsUnique();

                    b.ToTable("t_e_restaurateur_rst");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.TypePrestation", b =>
                {
                    b.Property<int>("IdPrestation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tpn_id")
                        .HasDefaultValueSql("nextval('type_prestation_id_seq'::regclass)");

                    b.Property<string>("DescriptionPrestation")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("tpn_description");

                    b.Property<string>("ImagePrestation")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("tpn_image");

                    b.Property<string>("LibellePrestation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tpn_libelle");

                    b.HasKey("IdPrestation")
                        .HasName("pk_type_prestation");

                    b.ToTable("t_e_typeprestation_tpn");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Vehicule", b =>
                {
                    b.Property<int>("IdVehicule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vcl_id")
                        .HasDefaultValueSql("nextval('vehicule_id_seq'::regclass)");

                    b.Property<bool>("AccepteAnimaux")
                        .HasColumnType("boolean")
                        .HasColumnName("vcl_accepteanimaux");

                    b.Property<int?>("Capacite")
                        .HasColumnType("integer")
                        .HasColumnName("vcl_capacite");

                    b.Property<string>("Couleur")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("vcl_couleur");

                    b.Property<string>("DemandeModification")
                        .HasColumnType("text")
                        .HasColumnName("vcl_demandemodification");

                    b.Property<bool>("DemandeModificationEffectue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("vcl_demandemodificationeffectue");

                    b.Property<bool>("EstConfortable")
                        .HasColumnType("boolean")
                        .HasColumnName("vcl_estconfortable");

                    b.Property<bool>("EstElectrique")
                        .HasColumnType("boolean")
                        .HasColumnName("vcl_estelectrique");

                    b.Property<bool>("EstLuxueux")
                        .HasColumnType("boolean")
                        .HasColumnName("vcl_estluxueux");

                    b.Property<bool>("EstRecent")
                        .HasColumnType("boolean")
                        .HasColumnName("vcl_estrecent");

                    b.Property<int>("IdCoursier")
                        .HasColumnType("integer")
                        .HasColumnName("crr_id");

                    b.Property<string>("Immatriculation")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character(9)")
                        .HasColumnName("vcl_immatriculation")
                        .IsFixedLength();

                    b.Property<string>("Marque")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vcl_marque");

                    b.Property<string>("Modele")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vcl_modele");

                    b.Property<string>("StatusProcessusLogistique")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vcl_statusprocessuslogistique")
                        .HasDefaultValueSql("'En attente'::character varying");

                    b.HasKey("IdVehicule")
                        .HasName("pk_vehicule");

                    b.HasIndex("IdCoursier");

                    b.HasIndex(new[] { "Immatriculation" }, "uq_vehicule_immatriculation")
                        .IsUnique();

                    b.ToTable("t_e_vehicule_vcl");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Velo", b =>
                {
                    b.Property<int>("IdVelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vel_id")
                        .HasDefaultValueSql("nextval('velo_id_seq'::regclass)");

                    b.Property<bool>("EstDisponible")
                        .HasColumnType("boolean")
                        .HasColumnName("vel_estdisponible");

                    b.Property<int>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    b.Property<int>("NumeroVelo")
                        .HasColumnType("integer")
                        .HasColumnName("vel_numero");

                    b.HasKey("IdVelo")
                        .HasName("pk_velo");

                    b.HasIndex("IdAdresse");

                    b.HasIndex(new[] { "NumeroVelo" }, "uq_velo_numero")
                        .IsUnique();

                    b.ToTable("t_e_velo_vel");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.VeloReservation", b =>
                {
                    b.Property<int>("IdReservationVelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("velr_id")
                        .HasDefaultValueSql("nextval('velo_reservation_id_seq'::regclass)");

                    b.Property<int>("IdVelo")
                        .HasColumnType("integer")
                        .HasColumnName("vel_id");

                    b.Property<int>("DureeReservation")
                        .HasColumnType("integer")
                        .HasColumnName("velr_dureereservation");

                    b.Property<decimal>("PrixReservation")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("velr_prixreservation");

                    b.HasKey("IdReservationVelo", "IdVelo")
                        .HasName("pk_velo_reservation");

                    b.HasIndex("IdVelo");

                    b.ToTable("t_e_veloreservation_velr");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Ville", b =>
                {
                    b.Property<int>("IdVille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vil_id")
                        .HasDefaultValueSql("nextval('ville_id_seq'::regclass)");

                    b.Property<int?>("IdCodePostal")
                        .HasColumnType("integer")
                        .HasColumnName("cp_id");

                    b.Property<int?>("IdPays")
                        .HasColumnType("integer")
                        .HasColumnName("pys_id");

                    b.Property<string>("NomVille")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vil_nom");

                    b.HasKey("IdVille")
                        .HasName("pk_ville");

                    b.HasIndex("IdCodePostal");

                    b.HasIndex("IdPays");

                    b.ToTable("t_e_ville_vil");
                });

            modelBuilder.Entity("ACommeCategorie", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.CategoriePrestation", null)
                        .WithMany()
                        .HasForeignKey("IdCategoriePrestation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a_comme_categorie_categorie");

                    b.HasOne("UberApi.Models.EntityFramework.Etablissement", null)
                        .WithMany()
                        .HasForeignKey("IdEtablissement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a_comme_categorie_etablissement");
                });

            modelBuilder.Entity("ACommeType", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.TypePrestation", null)
                        .WithMany()
                        .HasForeignKey("IdPrestation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a_comme_type_type_prestation");

                    b.HasOne("UberApi.Models.EntityFramework.Vehicule", null)
                        .WithMany()
                        .HasForeignKey("IdVehicule")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a_comme_type_vehicule");
                });

            modelBuilder.Entity("ClientCarte", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.CarteBancaire", null)
                        .WithMany()
                        .HasForeignKey("IdCb")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_appartient2_carte_bancaire");

                    b.HasOne("UberApi.Models.EntityFramework.Client", null)
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_appartient2_client");
                });

            modelBuilder.Entity("EstSitueA2", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Etablissement", null)
                        .WithMany()
                        .HasForeignKey("IdEtablissement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_est_situe2_etablissement");

                    b.HasOne("UberApi.Models.EntityFramework.Produit", null)
                        .WithMany()
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_est_situe2_produit");
                });

            modelBuilder.Entity("ProduitCategorie", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.CategorieProduit", null)
                        .WithMany()
                        .HasForeignKey("IdCategorie")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a3_categorie_produit");

                    b.HasOne("UberApi.Models.EntityFramework.Produit", null)
                        .WithMany()
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a3_produit");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Adresse", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Ville", "IdVilleNavigation")
                        .WithMany("Adresses")
                        .HasForeignKey("IdVille")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_adresse_ville");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Client", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Adresse", "IdAdresseNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdAdresse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_client_adresse");

                    b.HasOne("UberApi.Models.EntityFramework.Entreprise", "IdEntrepriseNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdEntreprise")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_client_entreprise");

                    b.Navigation("IdAdresseNavigation");

                    b.Navigation("IdEntrepriseNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.CodePostal", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Pays", "IdPaysNavigation")
                        .WithMany("CodePostals")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_code_postal_pays");

                    b.Navigation("IdPaysNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Commande", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Livreur", "IdLivreurNavigation")
                        .WithMany("Commandes")
                        .HasForeignKey("IdLivreur")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_commande_livreur");

                    b.HasOne("UberApi.Models.EntityFramework.Panier", "IdPanierNavigation")
                        .WithMany("Commandes")
                        .HasForeignKey("IdPanier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_commande_panier");

                    b.Navigation("IdLivreurNavigation");

                    b.Navigation("IdPanierNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Contient2", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Etablissement", "IdEtablissementNavigation")
                        .WithMany("Contient2s")
                        .HasForeignKey("IdEtablissement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_contient2_etablissement");

                    b.HasOne("UberApi.Models.EntityFramework.Panier", "IdPanierNavigation")
                        .WithMany("Contient2s")
                        .HasForeignKey("IdPanier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_contient2_panier");

                    b.HasOne("UberApi.Models.EntityFramework.Produit", "IdProduitNavigation")
                        .WithMany("Contient2s")
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_contient2_produit");

                    b.Navigation("IdEtablissementNavigation");

                    b.Navigation("IdPanierNavigation");

                    b.Navigation("IdProduitNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Course", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Adresse", "AdrIdAdresseNavigation")
                        .WithMany("CourseAdrIdAdresseNavigations")
                        .HasForeignKey("AdrIdAdresse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_course_adresse_depart");

                    b.HasOne("UberApi.Models.EntityFramework.Adresse", "IdAdresseNavigation")
                        .WithMany("CourseIdAdresseNavigations")
                        .HasForeignKey("IdAdresse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_course_adresse_arrivee");

                    b.HasOne("UberApi.Models.EntityFramework.CarteBancaire", "IdCbNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("IdCb")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_course_carte_bancaire");

                    b.HasOne("UberApi.Models.EntityFramework.Coursier", "IdCoursierNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("IdCoursier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_course_coursier");

                    b.HasOne("UberApi.Models.EntityFramework.TypePrestation", "IdPrestationNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("IdPrestation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_course_type_prestation");

                    b.HasOne("UberApi.Models.EntityFramework.Reservation", "IdReservationNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("IdReservation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_course_reservation");

                    b.Navigation("AdrIdAdresseNavigation");

                    b.Navigation("IdAdresseNavigation");

                    b.Navigation("IdCbNavigation");

                    b.Navigation("IdCoursierNavigation");

                    b.Navigation("IdPrestationNavigation");

                    b.Navigation("IdReservationNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Coursier", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Adresse", "IdAdresseNavigation")
                        .WithMany("Coursiers")
                        .HasForeignKey("IdAdresse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_coursier_adresse");

                    b.HasOne("UberApi.Models.EntityFramework.Entreprise", "IdEntrepriseNavigation")
                        .WithMany("Coursiers")
                        .HasForeignKey("IdEntreprise")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_coursier_entreprise");

                    b.Navigation("IdAdresseNavigation");

                    b.Navigation("IdEntrepriseNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Entreprise", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Adresse", "IdAdresseNavigation")
                        .WithMany("Entreprises")
                        .HasForeignKey("IdAdresse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_entreprise_adresse");

                    b.Navigation("IdAdresseNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Entretien", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Coursier", "IdCoursierNavigation")
                        .WithMany("Entretiens")
                        .HasForeignKey("IdCoursier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_entretien_coursier");

                    b.Navigation("IdCoursierNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Etablissement", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Adresse", "IdAdresseNavigation")
                        .WithMany("Etablissements")
                        .HasForeignKey("IdAdresse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_etablissement_adresse");

                    b.HasOne("UberApi.Models.EntityFramework.Restaurateur", "IdRestaurateurNavigation")
                        .WithMany("Etablissements")
                        .HasForeignKey("IdRestaurateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etablissement_restaurateur");

                    b.Navigation("IdAdresseNavigation");

                    b.Navigation("IdRestaurateurNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Facture", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Client", "IdClientNavigation")
                        .WithMany("Factures")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_facture_client");

                    b.HasOne("UberApi.Models.EntityFramework.Commande", "IdCommandeNavigation")
                        .WithMany("Factures")
                        .HasForeignKey("IdCommande")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_facture_commande");

                    b.HasOne("UberApi.Models.EntityFramework.Pays", "IdPaysNavigation")
                        .WithMany("Factures")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_facture_pays");

                    b.HasOne("UberApi.Models.EntityFramework.Reservation", "IdReservationNavigation")
                        .WithMany("Factures")
                        .HasForeignKey("IdReservation")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_facture_reservation");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdCommandeNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdReservationNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.GestionEtablissement", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Etablissement", "IdEtablissementNavigation")
                        .WithMany("GestionEtablissements")
                        .HasForeignKey("IdEtablissement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gestion_etablissement");

                    b.HasOne("UberApi.Models.EntityFramework.ResponsableEnseigne", "IdResponsableNavigation")
                        .WithMany("GestionEtablissements")
                        .HasForeignKey("IdResponsable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gestion_responsable");

                    b.Navigation("IdEtablissementNavigation");

                    b.Navigation("IdResponsableNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Horaires", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Coursier", "IdCoursierNavigation")
                        .WithMany("Horaires")
                        .HasForeignKey("IdCoursier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_horaires_coursier");

                    b.HasOne("UberApi.Models.EntityFramework.Etablissement", "IdEtablissementNavigation")
                        .WithMany("Horaires")
                        .HasForeignKey("IdEtablissement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_horaires_etablissement");

                    b.HasOne("UberApi.Models.EntityFramework.Livreur", "IdLivreurNavigation")
                        .WithMany("Horaires")
                        .HasForeignKey("IdLivreur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_horaires_livreur");

                    b.Navigation("IdCoursierNavigation");

                    b.Navigation("IdEtablissementNavigation");

                    b.Navigation("IdLivreurNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.LieuFavori", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Adresse", "IdAdresseNavigation")
                        .WithMany("LieuFavoris")
                        .HasForeignKey("IdAdresse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lieu_favori_adresse");

                    b.HasOne("UberApi.Models.EntityFramework.Client", "IdClientNavigation")
                        .WithMany("LieuFavoris")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lieu_favori_client");

                    b.Navigation("IdAdresseNavigation");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Otp", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Client", "IdClientNavigation")
                        .WithMany("Otps")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_otp_client");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Panier", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Client", "IdClientNavigation")
                        .WithMany("Paniers")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_panier_client");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.ReglementSalaire", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Coursier", "IdCoursierNavigation")
                        .WithMany("ReglementSalaires")
                        .HasForeignKey("IdCoursier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_reglement_salaire_coursier");

                    b.Navigation("IdCoursierNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Reservation", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Client", "IdClientNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reservation_client");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Vehicule", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Coursier", "IdCoursierNavigation")
                        .WithMany("Vehicules")
                        .HasForeignKey("IdCoursier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehicule_coursier");

                    b.Navigation("IdCoursierNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Velo", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Adresse", "IdAdresseNavigation")
                        .WithMany("Velos")
                        .HasForeignKey("IdAdresse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_velo_adresse");

                    b.Navigation("IdAdresseNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.VeloReservation", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.Reservation", "IdReservationVeloNavigation")
                        .WithMany("VeloReservations")
                        .HasForeignKey("IdReservationVelo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_velo_reservation_reservation");

                    b.HasOne("UberApi.Models.EntityFramework.Velo", "IdVeloNavigation")
                        .WithMany("VeloReservations")
                        .HasForeignKey("IdVelo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_velo_reservation_velo");

                    b.Navigation("IdReservationVeloNavigation");

                    b.Navigation("IdVeloNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Ville", b =>
                {
                    b.HasOne("UberApi.Models.EntityFramework.CodePostal", "IdCodePostalNavigation")
                        .WithMany("Villes")
                        .HasForeignKey("IdCodePostal")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ville_code_postal");

                    b.HasOne("UberApi.Models.EntityFramework.Pays", "IdPaysNavigation")
                        .WithMany("Villes")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ville_pays");

                    b.Navigation("IdCodePostalNavigation");

                    b.Navigation("IdPaysNavigation");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Adresse", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("CourseAdrIdAdresseNavigations");

                    b.Navigation("CourseIdAdresseNavigations");

                    b.Navigation("Coursiers");

                    b.Navigation("Entreprises");

                    b.Navigation("Etablissements");

                    b.Navigation("LieuFavoris");

                    b.Navigation("Velos");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.CarteBancaire", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Client", b =>
                {
                    b.Navigation("Factures");

                    b.Navigation("LieuFavoris");

                    b.Navigation("Otps");

                    b.Navigation("Paniers");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.CodePostal", b =>
                {
                    b.Navigation("Villes");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Commande", b =>
                {
                    b.Navigation("Factures");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Coursier", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Entretiens");

                    b.Navigation("Horaires");

                    b.Navigation("ReglementSalaires");

                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Entreprise", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Coursiers");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Etablissement", b =>
                {
                    b.Navigation("Contient2s");

                    b.Navigation("GestionEtablissements");

                    b.Navigation("Horaires");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Livreur", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Horaires");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Panier", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Contient2s");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Pays", b =>
                {
                    b.Navigation("CodePostals");

                    b.Navigation("Factures");

                    b.Navigation("Villes");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Produit", b =>
                {
                    b.Navigation("Contient2s");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Reservation", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Factures");

                    b.Navigation("VeloReservations");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.ResponsableEnseigne", b =>
                {
                    b.Navigation("GestionEtablissements");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Restaurateur", b =>
                {
                    b.Navigation("Etablissements");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.TypePrestation", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Velo", b =>
                {
                    b.Navigation("VeloReservations");
                });

            modelBuilder.Entity("UberApi.Models.EntityFramework.Ville", b =>
                {
                    b.Navigation("Adresses");
                });
#pragma warning restore 612, 618
        }
    }
}
